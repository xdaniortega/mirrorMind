{
  "_format": "hh3-sol-build-info-1",
  "id": "ce034e387cfe5d39dbf820265e1b42716efdca0e",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/AgentRegistry.sol": "project/contracts/AgentRegistry.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "evmVersion": "cancun",
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.3.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.3.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.3.0/",
        "project/:@selfxyz/contracts/=npm/@selfxyz/contracts@1.2.0/",
        "project/:@selfxyz/contracts/=npm/@selfxyz/contracts@1.2.0/",
        "project/:@selfxyz/contracts/=npm/@selfxyz/contracts@1.2.0/",
        "project/:@selfxyz/contracts/=npm/@selfxyz/contracts@1.2.0/",
        "project/:@selfxyz/contracts/=npm/@selfxyz/contracts@1.2.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.3.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.3.0/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.3.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.3.0/utils/ReentrancyGuard.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
      },
      "npm/@selfxyz/contracts@1.2.0/contracts/abstract/SelfVerificationRoot.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\nimport {IIdentityVerificationHubV2} from \"../interfaces/IIdentityVerificationHubV2.sol\";\nimport {ISelfVerificationRoot} from \"../interfaces/ISelfVerificationRoot.sol\";\nimport {CircuitConstantsV2} from \"../constants/CircuitConstantsV2.sol\";\nimport {AttestationId} from \"../constants/AttestationId.sol\";\n\n/**\n * @title SelfVerificationRoot\n * @notice Abstract base contract to be integrated with self's verification infrastructure\n * @dev Provides base functionality for verifying and disclosing identity credentials\n * @author Self Team\n */\nabstract contract SelfVerificationRoot is ISelfVerificationRoot {\n    // ====================================================\n    // Constants\n    // ====================================================\n\n    /// @notice Contract version identifier used in verification process\n    /// @dev This version is included in the hub data for protocol compatibility\n    uint8 constant CONTRACT_VERSION = 2;\n\n    // ====================================================\n    // Storage Variables\n    // ====================================================\n\n    /// @notice The scope value that proofs must match\n    /// @dev Used to validate that submitted proofs match the expected scope\n    uint256 internal _scope;\n\n    /// @notice Reference to the identity verification hub V2 contract\n    /// @dev Immutable reference used for bytes-based proof verification\n    IIdentityVerificationHubV2 internal immutable _identityVerificationHubV2;\n\n    // ====================================================\n    // Errors\n    // ====================================================\n\n    /// @notice Error thrown when the data format is invalid\n    /// @dev Triggered when the provided bytes data doesn't have the expected format\n    error InvalidDataFormat();\n\n    /// @notice Error thrown when onVerificationSuccess is called by an unauthorized address\n    /// @dev Only the identity verification hub V2 contract can call onVerificationSuccess\n    error UnauthorizedCaller();\n\n    // ====================================================\n    // Events\n    // ====================================================\n\n    /// @notice Emitted when the scope is updated\n    /// @param newScope The new scope value that was set\n    event ScopeUpdated(uint256 indexed newScope);\n\n    /**\n     * @notice Initializes the SelfVerificationRoot contract\n     * @dev Sets up the immutable reference to the hub contract and initial scope\n     * @param identityVerificationHubV2Address The address of the Identity Verification Hub V2\n     * @param scopeValue The expected proof scope for user registration\n     */\n    constructor(address identityVerificationHubV2Address, uint256 scopeValue) {\n        _identityVerificationHubV2 = IIdentityVerificationHubV2(identityVerificationHubV2Address);\n        _scope = scopeValue;\n    }\n\n    /**\n     * @notice Returns the current scope value\n     * @dev Public view function to access the current scope setting\n     * @return The scope value that proofs must match\n     */\n    function scope() public view returns (uint256) {\n        return _scope;\n    }\n\n    /**\n     * @notice Updates the scope value\n     * @dev Protected internal function to change the expected scope for proofs\n     * @param newScope The new scope value to set\n     */\n    function _setScope(uint256 newScope) internal {\n        _scope = newScope;\n        emit ScopeUpdated(newScope);\n    }\n\n    /**\n     * @notice Verifies a self-proof using the bytes-based interface\n     * @dev Parses relayer data format and validates against contract settings before calling hub V2\n     * @param proofPayload Packed data from relayer in format: | 32 bytes attestationId | proof data |\n     * @param userContextData User-defined data in format: | 32 bytes destChainId | 32 bytes userIdentifier | data |\n     * @custom:data-format proofPayload = | 32 bytes attestationId | proofData |\n     * @custom:data-format userContextData = | 32 bytes destChainId | 32 bytes userIdentifier | data |\n     * @custom:data-format hubData = | 1 bytes contract version | 31 bytes buffer | 32 bytes scope | 32 bytes attestationId | proofData |\n     */\n    function verifySelfProof(bytes calldata proofPayload, bytes calldata userContextData) public {\n        // Minimum expected length for proofData: 32 bytes attestationId + proof data\n        if (proofPayload.length < 32) {\n            revert InvalidDataFormat();\n        }\n\n        // Minimum userDefinedData length: 32 (destChainId) + 32 (userIdentifier) + 0 (userDefinedData) = 64 bytes\n        if (userContextData.length < 64) {\n            revert InvalidDataFormat();\n        }\n\n        bytes32 attestationId;\n        assembly {\n            // Load attestationId from the beginning of proofData (first 32 bytes)\n            attestationId := calldataload(proofPayload.offset)\n        }\n\n        bytes32 destinationChainId = bytes32(userContextData[0:32]);\n        bytes32 userIdentifier = bytes32(userContextData[32:64]);\n        bytes memory userDefinedData = userContextData[64:];\n\n        bytes32 configId = getConfigId(destinationChainId, userIdentifier, userDefinedData);\n\n        // Hub data should be | 1 byte contractVersion | 31 bytes buffer | 32 bytes scope | 32 bytes attestationId | proof data\n        bytes memory baseVerificationInput = abi.encodePacked(\n            // 1 byte contractVersion\n            CONTRACT_VERSION,\n            // 31 bytes buffer (all zeros)\n            bytes31(0),\n            // 32 bytes scope\n            _scope,\n            // 32 bytes attestationId\n            attestationId,\n            // proof data (starts after 32 bytes attestationId)\n            proofPayload[32:]\n        );\n\n        // Call hub V2 verification\n        _identityVerificationHubV2.verify(baseVerificationInput, bytes.concat(configId, userContextData));\n    }\n\n    /**\n     * @notice Callback function called upon successful verification by the hub contract\n     * @dev Only callable by the identity verification hub V2 contract for security\n     * @param output The verification output data containing disclosed identity information\n     * @param userData The user-defined data passed through the verification process\n     * @custom:security Only the authorized hub contract can call this function\n     * @custom:flow This function decodes the output and calls the customizable verification hook\n     */\n    function onVerificationSuccess(bytes memory output, bytes memory userData) public {\n        // Only allow the identity verification hub V2 to call this function\n        if (msg.sender != address(_identityVerificationHubV2)) {\n            revert UnauthorizedCaller();\n        }\n\n        ISelfVerificationRoot.GenericDiscloseOutputV2 memory genericDiscloseOutput = abi.decode(\n            output,\n            (ISelfVerificationRoot.GenericDiscloseOutputV2)\n        );\n\n        // Call the customizable verification hook\n        customVerificationHook(genericDiscloseOutput, userData);\n    }\n\n    /**\n     * @notice Generates a configId for the user\n     * @dev This function should be overridden by the implementing contract to provide custom configId logic\n     * @param destinationChainId The destination chain ID\n     * @param userIdentifier The user identifier\n     * @param userDefinedData The user defined data\n     * @return The configId\n     */\n    function getConfigId(\n        bytes32 destinationChainId,\n        bytes32 userIdentifier,\n        bytes memory userDefinedData\n    ) public view virtual returns (bytes32) {\n        // Default implementation reverts; must be overridden in derived contract\n        revert(\"SelfVerificationRoot: getConfigId must be overridden\");\n    }\n\n    /**\n     * @notice Custom verification hook that can be overridden by implementing contracts\n     * @dev This function is called after successful verification and hub address validation\n     * @param output The verification output data from the hub containing disclosed identity information\n     * @param userData The user-defined data passed through the verification process\n     * @custom:override Override this function in derived contracts to add custom verification logic\n     * @custom:security This function is only called after proper authentication by the hub contract\n     */\n    function customVerificationHook(\n        ISelfVerificationRoot.GenericDiscloseOutputV2 memory output,\n        bytes memory userData\n    ) internal virtual {\n        // Default implementation is empty - override in derived contracts to add custom logic\n    }\n}\n"
      },
      "npm/@selfxyz/contracts@1.2.0/contracts/constants/AttestationId.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\n/**\n * @title AttestationId Library\n * @notice This library provides attestation identifiers used across contracts.\n * @dev Currently, it contains the constant E_PASSPORT which represents the identifier\n * for an E-PASSPORT attestation computed as Poseidon(\"E-PASSPORT\").\n */\nlibrary AttestationId {\n    /**\n     * @notice Identifier for an E-PASSPORT attestation.\n     * @dev The identifier is computed based on the hash of \"E-PASSPORT\" using the Poseidon hash function.\n     * Here it is hardcoded as bytes32(uint256(1)) for demonstration purposes.\n     */\n    bytes32 constant E_PASSPORT = bytes32(uint256(1));\n    bytes32 constant EU_ID_CARD = bytes32(uint256(2));\n}\n"
      },
      "npm/@selfxyz/contracts@1.2.0/contracts/constants/CircuitConstantsV2.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\nimport {AttestationId} from \"./AttestationId.sol\";\n\n/**\n * @title Circuit Constants Library\n * @notice This library defines constants representing indices used to access public signals\n *         of various circuits such as register, DSC, and VC/Disclose.\n * @dev These indices map directly to specific data fields in the corresponding circuits proofs.\n */\nlibrary CircuitConstantsV2 {\n    // ---------------------------\n    // Register Circuit Constants\n    // ---------------------------\n\n    /**\n     * @notice Index to access the nullifier in the register circuit public signals.\n     */\n    uint256 constant REGISTER_NULLIFIER_INDEX = 0;\n\n    /**\n     * @notice Index to access the commitment in the register circuit public signals.\n     */\n    uint256 constant REGISTER_COMMITMENT_INDEX = 1;\n\n    /**\n     * @notice Index to access the Merkle root in the register circuit public signals.\n     */\n    uint256 constant REGISTER_MERKLE_ROOT_INDEX = 2;\n\n    // ---------------------------\n    // DSC Circuit Constants\n    // ---------------------------\n\n    /**\n     * @notice Index to access the tree leaf in the DSC circuit public signals.\n     */\n    uint256 constant DSC_TREE_LEAF_INDEX = 0;\n\n    /**\n     * @notice Index to access the CSCA root in the DSC circuit public signals.\n     */\n    uint256 constant DSC_CSCA_ROOT_INDEX = 1;\n\n    // -------------------------------------\n    // VC and Disclose Circuit Constants\n    // -------------------------------------\n\n    /**\n     * @notice Structure containing circuit indices for a specific attestation type.\n     */\n    struct DiscloseIndices {\n        uint256 revealedDataPackedIndex;\n        uint256 forbiddenCountriesListPackedIndex;\n        uint256 nullifierIndex;\n        uint256 attestationIdIndex;\n        uint256 merkleRootIndex;\n        uint256 currentDateIndex;\n        uint256 namedobSmtRootIndex;\n        uint256 nameyobSmtRootIndex;\n        uint256 scopeIndex;\n        uint256 userIdentifierIndex;\n        uint256 passportNoSmtRootIndex; // Only for passport, 99 for ID card\n    }\n\n    /**\n     * @notice Returns the circuit indices for a given attestation type.\n     * @param attestationId The attestation identifier.\n     * @return indices The DiscloseIndices struct containing all relevant indices.\n     */\n    function getDiscloseIndices(bytes32 attestationId) internal pure returns (DiscloseIndices memory indices) {\n        if (attestationId == AttestationId.E_PASSPORT) {\n            return\n                DiscloseIndices({\n                    revealedDataPackedIndex: 0,\n                    forbiddenCountriesListPackedIndex: 3,\n                    nullifierIndex: 7,\n                    attestationIdIndex: 8,\n                    merkleRootIndex: 9,\n                    currentDateIndex: 10,\n                    namedobSmtRootIndex: 17,\n                    nameyobSmtRootIndex: 18,\n                    scopeIndex: 19,\n                    userIdentifierIndex: 20,\n                    passportNoSmtRootIndex: 16\n                });\n        } else if (attestationId == AttestationId.EU_ID_CARD) {\n            return\n                DiscloseIndices({\n                    revealedDataPackedIndex: 0,\n                    forbiddenCountriesListPackedIndex: 4,\n                    nullifierIndex: 8,\n                    attestationIdIndex: 9,\n                    merkleRootIndex: 10,\n                    currentDateIndex: 11,\n                    namedobSmtRootIndex: 17,\n                    nameyobSmtRootIndex: 18,\n                    scopeIndex: 19,\n                    userIdentifierIndex: 20,\n                    passportNoSmtRootIndex: 99\n                });\n        } else {\n            revert(\"Invalid attestation ID\");\n        }\n    }\n}\n"
      },
      "npm/@selfxyz/contracts@1.2.0/contracts/interfaces/IDscCircuitVerifier.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\n/**\n * @title IDscCircuitVerifier\n * @notice Interface for verifying zero-knowledge proofs related to the DSC circuit.\n * @dev This interface defines the structure of a DSC circuit proof and exposes a function to verify such proofs.\n */\ninterface IDscCircuitVerifier {\n    /**\n     * @notice Represents a DSC circuit proof.\n     * @param a An array of two unsigned integers representing the proof component 'a'.\n     * @param b A 2x2 array of unsigned integers representing the proof component 'b'.\n     * @param c An array of two unsigned integers representing the proof component 'c'.\n     * @param pubSignals An array of two unsigned integers representing the public signals associated with the proof.\n     */\n    struct DscCircuitProof {\n        uint[2] a;\n        uint[2][2] b;\n        uint[2] c;\n        uint[2] pubSignals;\n    }\n\n    /**\n     * @notice Verifies a given DSC circuit zero-knowledge proof.\n     * @dev This function checks the validity of the provided DSC proof parameters.\n     * @param pA The 'a' component of the proof.\n     * @param pB The 'b' component of the proof.\n     * @param pC The 'c' component of the proof.\n     * @param pubSignals The public signals associated with the proof.\n     * @return A boolean value indicating whether the provided proof is valid (true) or not (false).\n     */\n    function verifyProof(\n        uint[2] calldata pA,\n        uint[2][2] calldata pB,\n        uint[2] calldata pC,\n        uint[2] calldata pubSignals\n    ) external view returns (bool);\n}\n"
      },
      "npm/@selfxyz/contracts@1.2.0/contracts/interfaces/IIdentityVerificationHubV2.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\nimport {IRegisterCircuitVerifier} from \"./IRegisterCircuitVerifier.sol\";\nimport {IDscCircuitVerifier} from \"./IDscCircuitVerifier.sol\";\nimport {SelfStructs} from \"../libraries/SelfStructs.sol\";\n\n/**\n * @title IIdentityVerificationHubV2\n * @notice Interface for the Identity Verification Hub V2 for verifying zero-knowledge proofs.\n * @dev Defines all external and public functions from IdentityVerificationHubImplV2.\n */\ninterface IIdentityVerificationHubV2 {\n    // ====================================================\n    // External Functions\n    // ====================================================\n\n    /**\n     * @notice Registers a commitment using a register circuit proof.\n     * @dev Verifies the register circuit proof and then calls the Identity Registry to register the commitment.\n     * @param attestationId The attestation ID.\n     * @param registerCircuitVerifierId The identifier for the register circuit verifier to use.\n     * @param registerCircuitProof The register circuit proof data.\n     */\n    function registerCommitment(\n        bytes32 attestationId,\n        uint256 registerCircuitVerifierId,\n        IRegisterCircuitVerifier.RegisterCircuitProof memory registerCircuitProof\n    ) external;\n\n    /**\n     * @notice Registers a DSC key commitment using a DSC circuit proof.\n     * @dev Verifies the DSC proof and then calls the Identity Registry to register the dsc key commitment.\n     * @param attestationId The attestation ID.\n     * @param dscCircuitVerifierId The identifier for the DSC circuit verifier to use.\n     * @param dscCircuitProof The DSC circuit proof data.\n     */\n    function registerDscKeyCommitment(\n        bytes32 attestationId,\n        uint256 dscCircuitVerifierId,\n        IDscCircuitVerifier.DscCircuitProof memory dscCircuitProof\n    ) external;\n\n    /**\n     * @notice Sets verification config in V2 storage (owner only)\n     * @dev The configId is automatically generated from the config content using sha256(abi.encode(config))\n     * @param config The verification configuration\n     * @return configId The generated config ID\n     */\n    function setVerificationConfigV2(\n        SelfStructs.VerificationConfigV2 memory config\n    ) external returns (bytes32 configId);\n\n    /**\n     * @notice Main verification function with new structured input format\n     * @param baseVerificationInput The base verification input data\n     * @param userContextData The user context data\n     */\n    function verify(bytes calldata baseVerificationInput, bytes calldata userContextData) external;\n\n    /**\n     * @notice Updates the registry address.\n     * @param attestationId The attestation ID.\n     * @param registryAddress The new registry address.\n     */\n    function updateRegistry(bytes32 attestationId, address registryAddress) external;\n\n    /**\n     * @notice Updates the VC and Disclose circuit verifier address.\n     * @param attestationId The attestation ID.\n     * @param vcAndDiscloseCircuitVerifierAddress The new VC and Disclose circuit verifier address.\n     */\n    function updateVcAndDiscloseCircuit(bytes32 attestationId, address vcAndDiscloseCircuitVerifierAddress) external;\n\n    /**\n     * @notice Updates the register circuit verifier for a specific signature type.\n     * @param attestationId The attestation identifier.\n     * @param typeId The signature type identifier.\n     * @param verifierAddress The new register circuit verifier address.\n     */\n    function updateRegisterCircuitVerifier(bytes32 attestationId, uint256 typeId, address verifierAddress) external;\n\n    /**\n     * @notice Updates the DSC circuit verifier for a specific signature type.\n     * @param attestationId The attestation identifier.\n     * @param typeId The signature type identifier.\n     * @param verifierAddress The new DSC circuit verifier address.\n     */\n    function updateDscVerifier(bytes32 attestationId, uint256 typeId, address verifierAddress) external;\n\n    /**\n     * @notice Batch updates register circuit verifiers.\n     * @param attestationIds An array of attestation identifiers.\n     * @param typeIds An array of signature type identifiers.\n     * @param verifierAddresses An array of new register circuit verifier addresses.\n     */\n    function batchUpdateRegisterCircuitVerifiers(\n        bytes32[] calldata attestationIds,\n        uint256[] calldata typeIds,\n        address[] calldata verifierAddresses\n    ) external;\n\n    /**\n     * @notice Batch updates DSC circuit verifiers.\n     * @param attestationIds An array of attestation identifiers.\n     * @param typeIds An array of signature type identifiers.\n     * @param verifierAddresses An array of new DSC circuit verifier addresses.\n     */\n    function batchUpdateDscCircuitVerifiers(\n        bytes32[] calldata attestationIds,\n        uint256[] calldata typeIds,\n        address[] calldata verifierAddresses\n    ) external;\n\n    // ====================================================\n    // External View Functions\n    // ====================================================\n\n    /**\n     * @notice Returns the registry address for a given attestation ID.\n     * @param attestationId The attestation ID to query.\n     * @return The registry address associated with the attestation ID.\n     */\n    function registry(bytes32 attestationId) external view returns (address);\n\n    /**\n     * @notice Returns the disclose verifier address for a given attestation ID.\n     * @param attestationId The attestation ID to query.\n     * @return The disclose verifier address associated with the attestation ID.\n     */\n    function discloseVerifier(bytes32 attestationId) external view returns (address);\n\n    /**\n     * @notice Returns the register circuit verifier address for a given attestation ID and type ID.\n     * @param attestationId The attestation ID to query.\n     * @param typeId The type ID to query.\n     * @return The register circuit verifier address associated with the attestation ID and type ID.\n     */\n    function registerCircuitVerifiers(bytes32 attestationId, uint256 typeId) external view returns (address);\n\n    /**\n     * @notice Returns the DSC circuit verifier address for a given attestation ID and type ID.\n     * @param attestationId The attestation ID to query.\n     * @param typeId The type ID to query.\n     * @return The DSC circuit verifier address associated with the attestation ID and type ID.\n     */\n    function dscCircuitVerifiers(bytes32 attestationId, uint256 typeId) external view returns (address);\n\n    /**\n     * @notice Returns the merkle root timestamp for a given attestation ID and root.\n     * @param attestationId The attestation ID to query.\n     * @param root The merkle root to query.\n     * @return The merkle root timestamp associated with the attestation ID and root.\n     */\n    function rootTimestamp(bytes32 attestationId, uint256 root) external view returns (uint256);\n\n    /**\n     * @notice Returns the identity commitment merkle root for a given attestation ID.\n     * @param attestationId The attestation ID to query.\n     * @return The identity commitment merkle root associated with the attestation ID.\n     */\n    function getIdentityCommitmentMerkleRoot(bytes32 attestationId) external view returns (uint256);\n\n    /**\n     * @notice Checks if a verification config exists\n     * @param configId The configuration identifier\n     * @return exists Whether the config exists\n     */\n    function verificationConfigV2Exists(bytes32 configId) external view returns (bool exists);\n\n    // ====================================================\n    // Public Functions\n    // ====================================================\n\n    /**\n     * @notice Generates a config ID from a verification config\n     * @param config The verification configuration\n     * @return The generated config ID (sha256 hash of encoded config)\n     */\n    function generateConfigId(SelfStructs.VerificationConfigV2 memory config) external pure returns (bytes32);\n}\n"
      },
      "npm/@selfxyz/contracts@1.2.0/contracts/interfaces/IRegisterCircuitVerifier.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n/**\n * @title IRegisterCircuitVerifier\n * @notice Interface for verifying register circuit proofs.\n * @dev This interface defines the structure of a register circuit proof and exposes a function to verify such proofs.\n */\ninterface IRegisterCircuitVerifier {\n    /**\n     * @notice Represents a register circuit proof.\n     * @dev This structure encapsulates the required proof elements.\n     * @param a An array of two unsigned integers representing the proof component 'a'.\n     * @param b A 2x2 array of unsigned integers representing the proof component 'b'.\n     * @param c An array of two unsigned integers representing the proof component 'c'.\n     * @param pubSignals An array of three unsigned integers representing the public signals associated with the proof.\n     */\n    struct RegisterCircuitProof {\n        uint[2] a;\n        uint[2][2] b;\n        uint[2] c;\n        uint[3] pubSignals;\n    }\n\n    /**\n     * @notice Verifies a given register circuit proof.\n     * @dev This function checks the validity of the provided proof parameters.\n     * @param a The 'a' component of the proof.\n     * @param b The 'b' component of the proof.\n     * @param c The 'c' component of the proof.\n     * @param pubSignals The public signals associated with the proof.\n     * @return isValid A boolean value indicating whether the provided proof is valid (true) or not (false).\n     */\n    function verifyProof(\n        uint[2] calldata a,\n        uint[2][2] calldata b,\n        uint[2] calldata c,\n        uint[3] calldata pubSignals\n    ) external view returns (bool isValid);\n}\n"
      },
      "npm/@selfxyz/contracts@1.2.0/contracts/interfaces/ISelfVerificationRoot.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\n/**\n * @title ISelfVerificationRoot\n * @notice Interface for self-verification infrastructure integration\n * @dev Provides base functionality for verifying and disclosing identity credentials\n */\ninterface ISelfVerificationRoot {\n    /**\n     * @notice Structure containing proof data for disclose circuits\n     * @dev Contains the proof elements required for zero-knowledge verification\n     * @param a First proof element\n     * @param b Second proof element (2x2 matrix)\n     * @param c Third proof element\n     * @param pubSignals Array of 21 public signals for the circuit\n     */\n    struct DiscloseCircuitProof {\n        uint256[2] a;\n        uint256[2][2] b;\n        uint256[2] c;\n        uint256[21] pubSignals;\n    }\n\n    /**\n     * @notice Structure containing verified identity disclosure output data\n     * @dev Contains all disclosed identity information after successful verification\n     * @param attestationId Unique identifier for the identity documents\n     * @param userIdentifier Unique identifier for the user\n     * @param nullifier Unique nullifier to prevent double-spending\n     * @param forbiddenCountriesListPacked Packed representation of forbidden countries list\n     * @param issuingState The state/country that issued the identity document\n     * @param name Array of name components\n     * @param idNumber The identity document number\n     * @param nationality The nationality of the document holder\n     * @param dateOfBirth Date of birth in string format\n     * @param gender Gender of the document holder\n     * @param expiryDate Expiry date of the identity document\n     * @param olderThan Verified age threshold (e.g., 18 for adult verification)\n     * @param ofac Array of OFAC (Office of Foreign Assets Control) compliance flags\n     */\n    struct GenericDiscloseOutputV2 {\n        bytes32 attestationId;\n        uint256 userIdentifier;\n        uint256 nullifier;\n        uint256[4] forbiddenCountriesListPacked;\n        string issuingState;\n        string[] name;\n        string idNumber;\n        string nationality;\n        string dateOfBirth;\n        string gender;\n        string expiryDate;\n        uint256 olderThan;\n        bool[3] ofac;\n    }\n\n    /**\n     * @notice Verifies a self-proof using the bytes-based interface\n     * @dev Parses relayer data format and validates against contract settings before calling hub V2\n     * @param proofPayload Packed data from relayer in format: | 32 bytes attestationId | proof data |\n     * @param userContextData User-defined data in format: | 32 bytes configId | 32 bytes destChainId | 32 bytes userIdentifier | data |\n     */\n    function verifySelfProof(bytes calldata proofPayload, bytes calldata userContextData) external;\n\n    /**\n     * @notice Callback function called upon successful verification\n     * @dev Only the identity verification hub V2 contract should call this function\n     * @param output The verification output data containing disclosed identity information\n     * @param userData The user-defined data passed through the verification process\n     */\n    function onVerificationSuccess(bytes memory output, bytes memory userData) external;\n}\n"
      },
      "npm/@selfxyz/contracts@1.2.0/contracts/libraries/SelfStructs.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\n/**\n * @title SelfStructs\n * @dev Library containing data structures for Self protocol identity verification\n * @notice Defines structs for passport verification, EU ID verification, and generic disclosure outputs\n */\nlibrary SelfStructs {\n    /**\n     * @dev Header structure for Hub input containing contract version and scope information\n     * @param contractVersion Version of the contract being used\n     * @param scope Scope identifier for the verification request\n     * @param attestationId Unique identifier for the attestation\n     */\n    struct HubInputHeader {\n        uint8 contractVersion;\n        uint256 scope;\n        bytes32 attestationId;\n    }\n\n    /**\n     * @dev Output structure for passport verification results\n     * @param attestationId Unique identifier for the attestation\n     * @param revealedDataPacked Packed binary data of revealed information\n     * @param userIdentifier Unique identifier for the user\n     * @param nullifier Cryptographic nullifier to prevent double-spending\n     * @param forbiddenCountriesListPacked Packed list of forbidden countries (4 uint256 array)\n     */\n    struct PassportOutput {\n        uint256 attestationId;\n        bytes revealedDataPacked;\n        uint256 userIdentifier;\n        uint256 nullifier;\n        uint256[4] forbiddenCountriesListPacked;\n    }\n\n    /**\n     * @dev Output structure for EU ID verification results\n     * @param attestationId Unique identifier for the attestation\n     * @param revealedDataPacked Packed binary data of revealed information\n     * @param userIdentifier Unique identifier for the user\n     * @param nullifier Cryptographic nullifier to prevent double-spending\n     * @param forbiddenCountriesListPacked Packed list of forbidden countries (4 uint256 array)\n     */\n    struct EuIdOutput {\n        uint256 attestationId;\n        bytes revealedDataPacked;\n        uint256 userIdentifier;\n        uint256 nullifier;\n        uint256[4] forbiddenCountriesListPacked;\n    }\n\n    /// @dev OFAC verification mode: Passport number only\n    uint256 constant passportNoOfac = 0;\n    /// @dev OFAC verification mode: Name and date of birth\n    uint256 constant nameAndDobOfac = 1;\n    /// @dev OFAC verification mode: Name and year of birth\n    uint256 constant nameAndYobOfac = 2;\n\n    /**\n     * @dev Generic disclosure output structure (Version 2) with detailed personal information\n     * @param attestationId Unique identifier for the attestation\n     * @param userIdentifier Unique identifier for the user\n     * @param nullifier Cryptographic nullifier to prevent double-spending\n     * @param forbiddenCountriesListPacked Packed list of forbidden countries (4 uint256 array)\n     * @param issuingState Country or state that issued the document\n     * @param name Array of name components (first, middle, last names)\n     * @param idNumber Government-issued identification number\n     * @param nationality Nationality of the document holder\n     * @param dateOfBirth Date of birth in string format\n     * @param gender Gender of the document holder\n     * @param expiryDate Document expiration date in string format\n     * @param olderThan Minimum age verification result\n     * @param ofac Array of OFAC (Office of Foreign Assets Control) verification results for different modes\n     */\n    struct GenericDiscloseOutputV2 {\n        bytes32 attestationId;\n        uint256 userIdentifier;\n        uint256 nullifier;\n        uint256[4] forbiddenCountriesListPacked;\n        string issuingState;\n        string[] name;\n        string idNumber;\n        string nationality;\n        string dateOfBirth;\n        string gender;\n        string expiryDate;\n        uint256 olderThan;\n        bool[3] ofac;\n    }\n\n    /**\n     * @dev Verification configuration structure (Version 1)\n     * @param olderThanEnabled Whether minimum age verification is enabled\n     * @param olderThan Minimum age requirement\n     * @param forbiddenCountriesEnabled Whether forbidden countries check is enabled\n     * @param forbiddenCountriesListPacked Packed list of forbidden countries (4 uint256 array)\n     * @param ofacEnabled Array of boolean flags for different OFAC verification modes\n     */\n    struct VerificationConfigV1 {\n        bool olderThanEnabled;\n        uint256 olderThan;\n        bool forbiddenCountriesEnabled;\n        uint256[4] forbiddenCountriesListPacked;\n        bool[3] ofacEnabled;\n    }\n\n    /**\n     * @dev Verification configuration structure (Version 2)\n     * @param olderThanEnabled Whether minimum age verification is enabled\n     * @param olderThan Minimum age requirement\n     * @param forbiddenCountriesEnabled Whether forbidden countries check is enabled\n     * @param forbiddenCountriesListPacked Packed list of forbidden countries (4 uint256 array)\n     * @param ofacEnabled Array of boolean flags for different OFAC verification modes\n     */\n    struct VerificationConfigV2 {\n        bool olderThanEnabled;\n        uint256 olderThan;\n        bool forbiddenCountriesEnabled;\n        uint256[4] forbiddenCountriesListPacked;\n        bool[3] ofacEnabled;\n    }\n}\n"
      },
      "project/contracts/AgentRegistry.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {SelfVerificationRoot} from \"@selfxyz/contracts/contracts/abstract/SelfVerificationRoot.sol\";\nimport {ISelfVerificationRoot} from \"@selfxyz/contracts/contracts/interfaces/ISelfVerificationRoot.sol\";\nimport {IIdentityVerificationHubV2} from \"@selfxyz/contracts/contracts/interfaces/IIdentityVerificationHubV2.sol\";\nimport {SelfStructs} from \"@selfxyz/contracts/contracts/libraries/SelfStructs.sol\";\nimport {AttestationId} from \"@selfxyz/contracts/contracts/constants/AttestationId.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @title AgentRegistry\n * @dev Registry for AI agents with user verification and payment management\n */\ncontract AgentRegistry is SelfVerificationRoot, Ownable, ReentrancyGuard {\n    error InvalidUserAddress();\n    error NameRequired();\n    error PriceTooLow();\n    error PriceTooHigh();\n    error AmountMustBeGreaterThanZero();\n    error TransferFailed();\n    error InsufficientBalance();\n    error AgentDoesNotExist();\n    error AgentNotActive();\n    error UserNotVerified();\n    error NotAgentOwner();\n    error TransactionDoesNotExist();\n    error ServiceAlreadyCompleted();\n    error FeeTooHigh();\n    error NoFeesToWithdraw();\n    error InvalidPriceRange();\n\n    event AgentRegistered(uint256 indexed agentId, address indexed owner, string name, uint256 price);\n    event AgentUpdated(uint256 indexed agentId, string name, uint256 price, bool isActive);\n    event UserRegistered(address indexed user, bool isVerified);\n    event BalanceAdded(address indexed user, uint256 amount);\n    event ServicePurchased(uint256 indexed transactionId, address indexed user, uint256 indexed agentId, uint256 amount);\n    event ServiceCompleted(uint256 indexed transactionId, address indexed user, uint256 indexed agentId);\n    event PlatformFeeCollected(uint256 amount);\n    event UserVerified(address indexed user);\n    event CreatorAgentFeeCollected(uint256 amount);\n    \n    modifier onlyVerifiedUser() {\n        if (!users[msg.sender].isVerified) {\n            revert UserNotVerified();\n        }\n        _;\n    }\n    \n    // Agent structure\n    struct Agent {\n        address owner;\n        string name;\n        string description;\n        uint256 pricePerService; // Price in USDC (6 decimals)\n        bool isActive;\n        uint256 totalEarnings;\n        uint256 totalServices;\n        uint256 createdAt;\n        string metadata; // JSON string for additional data\n    }\n    \n    // User structure\n    struct User {\n        bool isVerified;\n        uint256 totalSpent;\n        uint256 lastActivity;\n        uint256 balance;\n    }\n    \n    // Service transaction structure\n    struct ServiceTransaction {\n        address user;\n        uint256 agentId;\n        uint256 amount;\n        uint256 timestamp;\n        bool completed;\n        string serviceData; // JSON string for service details\n    }\n    \n    // State variables\n    mapping(uint256 => Agent) public agents;\n    mapping(address => User) public users;\n    mapping(uint256 => ServiceTransaction) public transactions;\n    mapping(address => uint256[]) public userTransactions;\n    mapping(uint256 => uint256[]) public agentTransactions;\n    \n    // Counters\n    uint256 public nextAgentId = 1;\n    uint256 public nextTransactionId = 1;\n    uint256 public totalAgents = 0;\n    uint256 public totalUsers = 0;\n    uint256 public totalRevenue = 0;\n    \n    // Configuration\n    uint256 public platformFee = 500; // 5% (500 basis points)\n    uint256 public constant BASIS_POINTS = 10000;\n    uint256 public minimumServicePrice = 1000000; // 1 USDC minimum\n    uint256 public maximumServicePrice = 1000000000; // 1000 USDC maximum\n    uint256 public creatorAgentFee = 10000; // 0.01 USDC (1 * 10^4)\n    \n    // USDC token address (Celo USDC)\n    IERC20 public paymentToken;\n    \n    constructor(\n        address _identityVerificationHubV2,\n        uint256 _scope,\n        address _paymentToken\n    ) \n        SelfVerificationRoot(_identityVerificationHubV2, _scope)\n        Ownable(msg.sender)\n    {\n        paymentToken = IERC20(_paymentToken);\n    }\n\n    function setScope(uint256 _scope) external {\n        _setScope(_scope);\n    } \n    \n    // Self Protocol integration\n    function getConfigId(\n        bytes32 destinationChainId,\n        bytes32 userIdentifier, \n        bytes memory userDefinedData\n    ) public view override returns (bytes32) {\n        // Use a default config ID for age verification\n        return 0xefacbec81d9f7ce9eff069f164119208a871e933e75de0bc5d23d903581fbf27;\n    }\n    \n    function customVerificationHook(\n        ISelfVerificationRoot.GenericDiscloseOutputV2 memory output,\n        bytes memory userData\n    ) internal virtual override {\n        // Extract user address from userData\n        address userAddress = address(0);\n        if (userData.length >= 20) {\n            assembly {\n                userAddress := mload(add(userData, 20))\n            }\n        }\n        \n        if (userAddress == address(0)) {\n            revert InvalidUserAddress();\n        }\n        \n        // Register or update user verification status\n        if (users[userAddress].lastActivity == 0) {\n            totalUsers++;\n        }\n        \n        users[userAddress].isVerified = true;\n        users[userAddress].lastActivity = block.timestamp;\n        \n        emit UserVerified(userAddress);\n    }\n    \n    // Agent management functions\n    function registerAgent(\n        string memory name,\n        string memory description,\n        uint256 pricePerService,\n        string memory metadata\n    ) external onlyVerifiedUser returns (uint256) {\n        if (bytes(name).length == 0) {\n            revert NameRequired();\n        }\n        if (pricePerService < minimumServicePrice) {\n            revert PriceTooLow();\n        }\n        if (pricePerService > maximumServicePrice) {\n            revert PriceTooHigh();\n        }\n        \n        // Transfer creator fee from user to contract\n        if (!paymentToken.transferFrom(msg.sender, address(this), creatorAgentFee)) {\n            revert TransferFailed();\n        }\n        \n        uint256 agentId = nextAgentId++;\n        \n        agents[agentId] = Agent({\n            owner: msg.sender,\n            name: name,\n            description: description,\n            pricePerService: pricePerService,\n            isActive: true,\n            totalEarnings: 0,\n            totalServices: 0,\n            createdAt: block.timestamp,\n            metadata: metadata\n        });\n        \n        totalAgents++;\n        \n        emit AgentRegistered(agentId, msg.sender, name, pricePerService);\n        emit CreatorAgentFeeCollected(creatorAgentFee);\n        return agentId;\n    }\n    \n    function updateAgent(\n        uint256 agentId,\n        string memory name,\n        string memory description,\n        uint256 pricePerService,\n        bool isActive,\n        string memory metadata\n    ) external {\n        if (agents[agentId].owner != msg.sender) {\n            revert NotAgentOwner();\n        }\n        if (agentId == 0 || agentId >= nextAgentId) {\n            revert AgentDoesNotExist();\n        }\n        if (bytes(name).length == 0) {\n            revert NameRequired();\n        }\n        if (pricePerService < minimumServicePrice) {\n            revert PriceTooLow();\n        }\n        if (pricePerService > maximumServicePrice) {\n            revert PriceTooHigh();\n        }\n        \n        Agent storage agent = agents[agentId];\n        agent.name = name;\n        agent.description = description;\n        agent.pricePerService = pricePerService;\n        agent.isActive = isActive;\n        agent.metadata = metadata;\n        \n        emit AgentUpdated(agentId, name, pricePerService, isActive);\n    }\n    \n    function deactivateAgent(uint256 agentId) external {\n        if (agents[agentId].owner != msg.sender) {\n            revert NotAgentOwner();\n        }\n        if (agentId == 0 || agentId >= nextAgentId) {\n            revert AgentDoesNotExist();\n        }\n        agents[agentId].isActive = false;\n        emit AgentUpdated(agentId, agents[agentId].name, agents[agentId].pricePerService, false);\n    }\n    \n    // User management functions\n    function addBalance(uint256 amount) external nonReentrant {\n        if (amount == 0) {\n            revert AmountMustBeGreaterThanZero();\n        }\n        \n        // Transfer USDC from user to contract\n        if (!paymentToken.transferFrom(msg.sender, address(this), amount)) {\n            revert TransferFailed();\n        }\n        \n        if (users[msg.sender].lastActivity == 0) {\n            totalUsers++;\n        }\n        \n        users[msg.sender].balance += amount;\n        users[msg.sender].lastActivity = block.timestamp;\n        \n        emit BalanceAdded(msg.sender, amount);\n    }\n    \n    function withdrawBalance(uint256 amount) external nonReentrant {\n        if (amount == 0) {\n            revert AmountMustBeGreaterThanZero();\n        }\n        if (users[msg.sender].balance < amount) {\n            revert InsufficientBalance();\n        }\n        \n        users[msg.sender].balance -= amount;\n        users[msg.sender].lastActivity = block.timestamp;\n        \n        if (!paymentToken.transfer(msg.sender, amount)) {\n            revert TransferFailed();\n        }\n        emit BalanceAdded(msg.sender, amount);\n    }\n    \n    // Service purchase functions\n    function purchaseService(\n        uint256 agentId,\n        string memory serviceData\n    ) external \n        nonReentrant \n    {\n        if (agentId == 0 || agentId >= nextAgentId) {\n            revert AgentDoesNotExist();\n        }\n        if (!agents[agentId].isActive) {\n            revert AgentNotActive();\n        }\n        if (!users[msg.sender].isVerified) {\n            revert UserNotVerified();\n        }\n        if (users[msg.sender].balance < agents[agentId].pricePerService) {\n            revert InsufficientBalance();\n        }\n        \n        uint256 amount = agents[agentId].pricePerService;\n        uint256 transactionId = nextTransactionId++;\n        \n        // Calculate platform fee\n        uint256 platformFeeAmount = (amount * platformFee) / BASIS_POINTS;\n        uint256 agentAmount = amount - platformFeeAmount;\n        \n        // Deduct from user balance\n        users[msg.sender].balance -= amount;\n        users[msg.sender].totalSpent += amount;\n        users[msg.sender].lastActivity = block.timestamp;\n        \n        // Update agent earnings\n        agents[agentId].totalEarnings += agentAmount;\n        agents[agentId].totalServices++;\n        \n        // Create transaction record\n        transactions[transactionId] = ServiceTransaction({\n            user: msg.sender,\n            agentId: agentId,\n            amount: amount,\n            timestamp: block.timestamp,\n            completed: false,\n            serviceData: serviceData\n        });\n        \n        // Update mappings\n        userTransactions[msg.sender].push(transactionId);\n        agentTransactions[agentId].push(transactionId);\n        \n        totalRevenue += amount;\n        \n        emit ServicePurchased(transactionId, msg.sender, agentId, amount);\n    }\n    \n    function completeService(uint256 transactionId) external {\n        ServiceTransaction storage transaction = transactions[transactionId];\n        if (transaction.user == address(0)) {\n            revert TransactionDoesNotExist();\n        }\n        if (transaction.completed) {\n            revert ServiceAlreadyCompleted();\n        }\n        if (agents[transaction.agentId].owner != msg.sender) {\n            revert NotAgentOwner();\n        }\n        \n        transaction.completed = true;\n        \n        emit ServiceCompleted(transactionId, transaction.user, transaction.agentId);\n    }\n    \n    // View functions\n    function getAgent(uint256 agentId) external view returns (Agent memory) {\n        if (agentId == 0 || agentId >= nextAgentId) {\n            revert AgentDoesNotExist();\n        }\n        return agents[agentId];\n    }\n    \n    function getUser(address user) external view returns (User memory) {\n        return users[user];\n    }\n    \n    function getTransaction(uint256 transactionId) external view returns (ServiceTransaction memory) {\n        return transactions[transactionId];\n    }\n    \n    function getUserTransactions(address user) external view returns (uint256[] memory) {\n        return userTransactions[user];\n    }\n    \n    function getAgentTransactions(uint256 agentId) external view returns (uint256[] memory) {\n        if (agentId == 0 || agentId >= nextAgentId) {\n            revert AgentDoesNotExist();\n        }\n        return agentTransactions[agentId];\n    }\n    \n    function getAgentsByOwner(address owner) external view returns (uint256[] memory) {\n        uint256[] memory agentIds = new uint256[](totalAgents);\n        uint256 count = 0;\n        \n        for (uint256 i = 1; i < nextAgentId; i++) {\n            if (agents[i].owner == owner) {\n                agentIds[count] = i;\n                count++;\n            }\n        }\n        \n        // Resize array to actual count\n        assembly {\n            mstore(agentIds, count)\n        }\n        \n        return agentIds;\n    }\n    \n    function getActiveAgents() external view returns (uint256[] memory) {\n        uint256[] memory agentIds = new uint256[](totalAgents);\n        uint256 count = 0;\n        \n        for (uint256 i = 1; i < nextAgentId; i++) {\n            if (agents[i].isActive) {\n                agentIds[count] = i;\n                count++;\n            }\n        }\n        \n        // Resize array to actual count\n        assembly {\n            mstore(agentIds, count)\n        }\n        \n        return agentIds;\n    }\n    \n    // Admin functions\n    function setPlatformFee(uint256 newFee) external onlyOwner {\n        if (newFee > 2000) {\n            revert FeeTooHigh(); // Max 20%\n        }\n        platformFee = newFee;\n    }\n    \n    function setCreatorAgentFee(uint256 newFee) external onlyOwner {\n        creatorAgentFee = newFee;\n    }\n    \n    function withdrawPlatformFees() external onlyOwner {\n        uint256 balance = paymentToken.balanceOf(address(this));\n        if (balance == 0) {\n            revert NoFeesToWithdraw();\n        }\n        \n        if (!paymentToken.transfer(owner(), balance)) {\n            revert TransferFailed();\n        }\n        emit PlatformFeeCollected(balance);\n    }\n}\n"
      }
    }
  }
}